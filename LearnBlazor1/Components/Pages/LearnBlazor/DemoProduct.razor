@page "/LearnBlazor/demoproduct"

<h3 class="text-primary">Demo Product</h3>

<p>Favorite Count: @FavoriteCount</p>
<p>Product Selected: @SelectedProductId - @SelectedProductName</p>

<div class="border p-2 mt-2 bg-secondary">
    <div class="row">
        @foreach (var prod in ProductList)
        {
            <_ProductDetailsComponent Product="@prod"
                                      OnFavoriteUpdated="FavoriteCountChanged"
                                      OnProductClicked="ProductSelected"></_ProductDetailsComponent>
        }
    </div>
</div>

@code {
    private bool _showProperties = false;
    public int FavoriteCount { get; set; } = 0;
    public int SelectedProductId { get; set; }
    public string SelectedProductName { get; set; }

    List<Product> ProductList = [];

    protected override void OnInitialized()
    {
        ProductList.Add(new Product()
        {
            Id = 1,
            Name = "Midnight Blaze",
            Price = 5.99,
            IsActive = false,
            ProductProperties = [
                new ProductProperty() { Id = 1, Key = "Color", Value = "Red"},
                new ProductProperty() { Id = 1, Key = "Color", Value = "Green"},
                new ProductProperty() { Id = 1, Key = "Color", Value = "Blue"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Small"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Medium"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Large"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Strawberry"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Lemon"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Chocolate"},
            ]
        });

        ProductList.Add(new Product()
        {
            Id = 2,
            Name = "Blossom Lily",
            Price = 10.59,
            IsActive = true,
            ProductProperties = [
                new ProductProperty() { Id = 1, Key = "Color", Value = "Red"},
                new ProductProperty() { Id = 1, Key = "Color", Value = "Green"},
                new ProductProperty() { Id = 1, Key = "Color", Value = "Blue"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Small"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Medium"},
                new ProductProperty() { Id = 2, Key = "Size", Value = "Large"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Strawberry"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Lemon"},
                new ProductProperty() { Id = 2, Key = "Flavor", Value = "Chocolate"},
            ]
        });
    }

    protected void FavoriteCountChanged(bool isSelected)
    {
        if (isSelected)
        {
            FavoriteCount++;
        }
        else
        {
            FavoriteCount--;
        }
    }

    protected void ProductSelected(Product product)
    {
        SelectedProductId = product.Id;
        SelectedProductName = product.Name;
    }

    private void DeleteButton_Click(int id)
    {
        var prod = ProductList.FirstOrDefault(p => p.Id == id);

        if (prod == null) return;

        ProductList.Remove(prod);
    }

}
